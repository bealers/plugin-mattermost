---
description:
globs:
alwaysApply: false
---
# NO EMOJI POLICY

## **ABSOLUTE RULES**

- **NEVER use emojis in code** - No emojis in source files, comments, or variable names
- **NEVER use emojis in documentation** - Keep all docs professional and emoji-free
- **NEVER use emojis in commit messages** - Professional commit messages only
- **NEVER use emojis in file names** - Professional naming conventions only
- **MINIMIZE emojis in output** - Only use if absolutely essential for user experience

## **PROHIBITED USAGE**

```typescript
// ‚ùå NEVER DO THIS
const isReady = true; // ‚úÖ Ready to process
const data = getData(); // üöÄ Fetching data

// ‚ùå NEVER DO THIS
console.log("‚úÖ Operation successful!");
log.info("üîß Configuring system...");

// ‚ùå NEVER DO THIS  
function processData() {
  // üéØ Main processing logic
  return result;
}
```

## **CORRECT APPROACH**

```typescript
// ‚úÖ PROFESSIONAL APPROACH
const isReady = true; // Ready to process
const data = getData(); // Fetching data

// ‚úÖ CLEAN OUTPUT
console.log("Operation successful");
log.info("Configuring system");

// ‚úÖ CLEAR COMMENTS
function processData() {
  // Main processing logic
  return result;
}
```

## **DOCUMENTATION STANDARDS**

- Use clear, professional language
- Use standard markdown formatting for emphasis
- Use bullet points, headers, and formatting for structure
- Never use emojis as bullet points or decorative elements

## **ACCEPTABLE EXCEPTIONS**

Only in extremely rare cases where emoji adds essential meaning:
- User-facing error messages where emoji clarifies severity
- CLI output where standard symbols enhance usability (very sparingly)

**Default stance: NO EMOJIS. When in doubt, don't use them.**
